#!/bin/bash
set -euxo pipefail

echo "Running track setup script on host es3-api-v1"

# Wait for the Instruqt host bootstrap to finish
until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    sleep 1
done

echo "Project type: $PROJECT_TYPE"
echo "Regions: $REGIONS"

case "$PROJECT_TYPE" in
    "observability"|"security")
      python3 bin/es3-api.py \
        --operation create \
        --project-type $PROJECT_TYPE \
        --regions $REGIONS \
        --project-name $INSTRUQT_TRACK_SLUG-$INSTRUQT_PARTICIPANT_ID-`date '+%s'` \
        --api-key 'essu_Tlc5MlUzZzFZMEpqYkZWdllUUTBjMHRTYUZFNmFYRTFaMncxWDBoVVltRmpVVEZoY1ZCamVrVklRUT09AAAAAN38zcg=' \
        --wait-for-ready
        ;;
    "elasticsearch")
      OPTIMIZED_FOR="${OPTIMIZED_FOR:-general_purpose}"
      echo "Optimized for: $OPTIMIZED_FOR"
      python3 bin/es3-api.py \
        --operation create \
        --project-type $PROJECT_TYPE \
        --optimized-for $OPTIMIZED_FOR \
        --regions $REGIONS \
        --project-name $INSTRUQT_TRACK_SLUG-$INSTRUQT_PARTICIPANT_ID-`date '+%s'` \
        --api-key 'essu_Tlc5MlUzZzFZMEpqYkZWdllUUTBjMHRTYUZFNmFYRTFaMncxWDBoVVltRmpVVEZoY1ZCamVrVklRUT09AAAAAN38zcg=' \
        --wait-for-ready
        ;;
    *)
        echo "Error: Unknown project type '$PROJECT_TYPE'"
        exit 1
        ;;
esac

timeout=20
counter=0

while [ $counter -lt $timeout ]; do
    if [ -f "/tmp/project_results.json" ]; then
        echo "File found, continuing..."
        break
    fi
    
    echo "Waiting for file /tmp/project_results.json... ($((counter + 1))/$timeout seconds)"
    sleep 1
    counter=$((counter + 1))
done

# Check if we timed out
if [ $counter -eq $timeout ]; then
    echo "Timeout: File /tmp/project_results.json not found after $timeout seconds"
    exit 1
fi

export KIBANA_URL=`jq -r --arg region "$REGIONS" '.[$region].endpoints.kibana' /tmp/project_results.json`
export ELASTICSEARCH_PASSWORD=`jq -r --arg region "$REGIONS" '.[$region].credentials.password' /tmp/project_results.json`
export ES_URL=`jq -r --arg region "$REGIONS" '.[$region].endpoints.elasticsearch' /tmp/project_results.json`

agent variable set ES_KIBANA_URL `jq -r --arg region "$REGIONS" '.[$region].endpoints.kibana' /tmp/project_results.json`
agent variable set ES_USERNAME `jq -r --arg region "$REGIONS" '.[$region].credentials.username'  /tmp/project_results.json`
agent variable set ES_PASSWORD `jq -r --arg region "$REGIONS" '.[$region].credentials.password' /tmp/project_results.json`
agent variable set ES_DEPLOYMENT_ID `jq -r --arg region "$REGIONS" '.[$region].id' /tmp/project_results.json`

BASE64=$(echo -n "admin:${ELASTICSEARCH_PASSWORD}" | base64)
KIBANA_URL_WITHOUT_PROTOCOL=$(echo $KIBANA_URL | sed -e 's#http[s]\?://##g')

echo "Configure NGINX"
# Configure nginx
echo '
server { 
  listen 8080 default_server;
  server_name kibana;
  location /nginx_status {
    stub_status on;
    allow 127.0.0.1;
    deny all;
  }
  location / {
    proxy_set_header Host '${KIBANA_URL_WITHOUT_PROTOCOL}';
    proxy_pass '${KIBANA_URL}';
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_set_header Connection "";
    #proxy_hide_header Content-Security-Policy;
    proxy_set_header X-Scheme $scheme;
    proxy_set_header Authorization "Basic '${BASE64}'";
    proxy_set_header Accept-Encoding "";
    proxy_redirect off;
    proxy_http_version 1.1;
    client_max_body_size 20M;
    proxy_read_timeout 600;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";
    proxy_send_timeout          300;
    send_timeout                300;
    proxy_connect_timeout       300;
 }
}

server {
  listen 9200;
  server_name elasticsearch;
  
  location / {
    proxy_pass '${ES_URL}';
    proxy_connect_timeout       300;
    proxy_send_timeout          300;
    proxy_read_timeout          300;
    send_timeout                300;
  }
}
' > /etc/nginx/conf.d/default.conf

echo "Restart NGINX"
systemctl restart nginx


##create api key
echo "Creating ES API Key"


# Install dependencies
apt update && apt install -y python3-pip python3-venv
python3 -m venv /tmp/venv
source /tmp/venv/bin/activate
pip install --quiet elasticsearch==8.17.1

# Failure function for error messages
fail_message() {
  echo "$1" >&2
  exit 1
}

ES_USERNAME=$(jq -r --arg region "$REGIONS" '.[$region].credentials.username' /tmp/project_results.json)
ES_PASSWORD=$(jq -r --arg region "$REGIONS" '.[$region].credentials.password' /tmp/project_results.json)

# Create API key with specified privileges
/tmp/venv/bin/python <<EOF
import os
import json
from elasticsearch import Elasticsearch

# Get credentials from bash variables
ES_USERNAME = "$ES_USERNAME"
ES_PASSWORD = "$ES_PASSWORD"

# Elasticsearch configuration
ES_HOST = "http://es3-api-v1:9200"

# Connect to Elasticsearch using username and password
es = Elasticsearch(ES_HOST, basic_auth=(ES_USERNAME, ES_PASSWORD), request_timeout=120)

# Define the role with specified privileges
role_definition = {
    "write-only-role": {
        "cluster": [
            "manage",
            "all"
        ],
        "indices": [
            {
                "names": [
                    "*"
                ],
                "privileges": [
                    "write",
                    "read",
                    "view_index_metadata",
                    "manage",
                    "all"
                ],
                "allow_restricted_indices": False
            }
        ],
        "applications": [],
        "run_as": [],
        "metadata": {},
        "transient_metadata": {
            "enabled": True
        }
    }
}

# Try to create the role (optional - may not be supported in all Elasticsearch instances)
try:
    es.security.put_role(name="write-only-role", body=role_definition["write-only-role"])
    print("Role 'write-only-role' created successfully.")
    use_custom_role = True
except Exception as e:
    print(f"Note: Could not create custom role: {e}")
    print("Will create API key without custom role descriptor.")
    use_custom_role = False

# Check if encoded API key already exists in project results
existing_encoded_api_key = None
try:
    with open("/tmp/project_results.json", "r") as f:
        project_data = json.load(f)
    existing_encoded_api_key = project_data.get("$REGIONS", {}).get("credentials", {}).get("api_key")
except:
    pass

# If encoded API key exists, check if it's still valid
if existing_encoded_api_key:
    try:
        # Decode the API key to get the ID for validation
        import base64
        decoded_key = base64.b64decode(existing_encoded_api_key).decode('utf-8')
        api_key_id = decoded_key.split(':')[0]
        
        es.security.get_api_key(id=api_key_id)
        print(f"Using existing API key: {api_key_id}")
        encoded_api_key = existing_encoded_api_key
        print(f"Existing API key is valid and will be reused.")
    except:
        print(f"Existing encoded API key not found or invalid. Creating new one...")
        existing_encoded_api_key = None

# Create new API key if needed
if not existing_encoded_api_key:
    try:
        api_key_body = {
            "name": "lab-api-key"
        }
        
        # Add role descriptor only if custom role was created successfully
        if use_custom_role:
            api_key_body["role_descriptors"] = {
                "write-only-role": role_definition["write-only-role"]
            }

        response = es.security.create_api_key(body=api_key_body)
        api_key_id = response["id"]
        api_key_value = response["api_key"]
        encoded_api_key = response["encoded"]
        
        print(f"New API Key created successfully!")
        print(f"API Key ID: {api_key_id}")
        print(f"API Key Value: {api_key_value}")
        print(f"Encoded API Key: {encoded_api_key}")
        
        # Save the encoded API key to a file for later use
        with open("/tmp/api_key.txt", "w") as f:
            f.write(encoded_api_key)
        print("API key saved to /tmp/api_key.txt")
        
        # Add encoded API key to project results JSON
        with open("/tmp/project_results.json", "r") as f:
            project_data = json.load(f)
        
        # Add encoded_api_key to credentials
        project_data["$REGIONS"]["credentials"]["api_key"] = encoded_api_key
        
        # Write back to file
        with open("/tmp/project_results.json", "w") as f:
            json.dump(project_data, f, indent=2)
        print(f"Encoded API key added to project results JSON under credentials")
        
        
    except Exception as e:
        print(f"Error creating API key: {e}")
        exit(1)
else:
    print(f"API key ID already exists in project results JSON")
    # Store existing encoded API key in agent variable
    import subprocess
    subprocess.run(["agent", "variable", "set", "ES_API_KEY", encoded_api_key], check=True)
    print(f"Existing encoded API key stored in agent variable ES_API_KEY")
EOF

echo "API key creation completed successfully."



# Single wrapper script to create Python server and start it in background

echo "Setting up JSON server on port 8081..."

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "Working directory: $SCRIPT_DIR"

# Create the Python server file
cat > "$SCRIPT_DIR/serve_json.py" << 'EOF'
#!/usr/bin/env python3
"""
Simple HTTP server to serve /tmp/project_results.json on port 8081
"""

import json
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
import sys

class JSONHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        # Set CORS headers to allow cross-origin requests
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        try:
            # Read the JSON file
            with open('/tmp/project_results.json', 'r') as f:
                json_data = f.read()
            
            # Send the JSON content
            self.wfile.write(json_data.encode('utf-8'))
            
        except FileNotFoundError:
            error_response = {
                "error": "File not found",
                "message": "/tmp/project_results.json does not exist"
            }
            self.wfile.write(json.dumps(error_response).encode('utf-8'))
            
        except Exception as e:
            error_response = {
                "error": "Server error",
                "message": str(e)
            }
            self.wfile.write(json.dumps(error_response).encode('utf-8'))
    
    def do_OPTIONS(self):
        # Handle preflight CORS requests
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

def main():
    port = 8081
    server_address = ('', port)
    
    try:
        httpd = HTTPServer(server_address, JSONHandler)
        print(f"Server started on port {port}")
        print(f"Serving /tmp/project_results.json")
        print(f"Access at: http://localhost:{port}")
        print("Press Ctrl+C to stop the server")
        
        httpd.serve_forever()
        
    except KeyboardInterrupt:
        print("\nServer stopped.")
        sys.exit(0)
    except Exception as e:
        print(f"Error starting server: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
EOF

# Make the Python script executable
chmod +x "$SCRIPT_DIR/serve_json.py"

# Check if the JSON file exists
if [ ! -f "/tmp/project_results.json" ]; then
    echo "Warning: /tmp/project_results.json not found!"
    echo "The server will return an error when accessed."
fi

# Assume nothing is running on port 8081
echo "Starting JSON server on port 8081..."

# Start the server in background
echo "Starting JSON server in background..."
cd "$SCRIPT_DIR"
nohup bash -c "cd '$SCRIPT_DIR' && python3 serve_json.py" > server.log 2>&1 &

# Get the process ID
SERVER_PID=$!

# Wait a moment for the server to start
sleep 2

# Check if server started successfully
sleep 2
if kill -0 $SERVER_PID 2>/dev/null; then
    echo "✅ Server started successfully!"
    echo "📊 Server PID: $SERVER_PID"
    echo "📝 Logs: server.log"
    echo "🌐 Access URL: http://localhost:8081"
    echo ""
    echo "📋 Useful commands:"
    echo "  View logs: tail -f server.log"
    echo "  Test server: curl http://localhost:8081"
    echo "  Stop server: kill $SERVER_PID"
    echo "  Check status: ps aux | grep serve_json"
else
    echo "❌ Failed to start server"
    echo "Check server.log for details:"
    if [ -f "server.log" ]; then
        tail -5 server.log
    else
        echo "No log file found"
    fi
    exit 1
fi 


echo "done"